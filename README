Async Http Client
Copyright 2010 Ning Inc

DESCRIPTION
-----------
Async Http Client is a Java based set of APIs that can be used to accomplish asynchronous http requests and receive asynchronous responses. The API is as simple as:

    AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
    Future<Response> f = asyncHttpClient.prepareGet("http://www.ning.com/").execute();
    // Wait for the response
    Response r = f.get();

You can also accomplish asynchronous operation without using a Future to block for the response:

    AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
    asyncHttpClient.prepareGet("http://www.ning.com/").execute(new AsyncCompletionHandler<Response>(){
        
        @Override
        public Response onCompleted(Response response){
            // Do something with the Response
            // ...                                   `
            return response;
        }
        
        @Override
        public void onThrowable(Throwable t){
            // Something wrong happened.
        }
    });

You can also mix Future with AsyncHandler

    AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
    Future<Integer> f = asyncHttpClient.prepareGet("http://www.ning.com/").execute(new AsyncCompletionHandler<Integer>(){
        
        @Override
        public int onCompleted(Response response){
            // Do something with the Response
            return response.getStatusCode();
        }
        
        @Override
        public void onThrowable(Throwable t){
            // Something wrong happened.
        }
    });
    
    int statuÑ•Code = f.get();

You can also have full control on the Response life cycle by deciding at any moment to stop processing what the server is sending back:

      AsyncHttpClient c = new AsyncHttpClient();
      Future<String> f = c.prepareGet("http://www.ning.com/").execute(new AsyncHandler<String>() {
          private StringBuilder builder = new StringBuilder();

          @Override
          public void onStatusReceived(HttpResponseStatus status) throws Exception {
              int statusCode = status.getStatusCode();
               // The Status have been read
               // If you don't want to read the headers,body, or stop processing the response
               throw new ResponseComplete();
          }

          @Override
          public void onHeadersReceived(HttpResponseHeaders headers) throws Exception {
              Headers headers = headers.getHeaders();
               // The headers have been read
               // If you don't want to read the body, or stop processing the response
               throw new ResponseComplete();
          }
          @Override

          public void onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
               builder.append(new String(bodyPart.getBodyPartBytes()));
          }

          @Override
          public String onCompleted() throws Exception {
               // Will be invoked once the response has been fully read or a ResponseComplete exception
               // has been thrown.
               return builder.toString();
          }

          @Override
          public void onThrowable(Throwable t) {
          }
      });
      
      String bodyResponse = f.get();


Finally, you can also configure the AsyncHttpClient via it's AsyncHttpClientConfig object:

        AsyncHttpClientConfig cf = new AsyncHttpClientConfig.Builder().setProxyServer(new ProxyServer("127.0.0.1", 38080)).build();
        AsyncHttpClient c = new AsyncHttpClient(cf);

For more information, post your questions to http://groups.google.com/group/asynchttpclient


