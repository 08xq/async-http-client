Async Http Client
Copyright 2010 Ning Inc

DESCRIPTION
-----------
Async Http Client is a Java based set of APIs that can be used to accomplish asynchronous http requests and receive asynchronous responses. The API is as simple as:

    AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
    Future<Response> f = asyncHttpClient.prepareGet("http://www.ning.com/").execute();
    // Wait for the response
    Response r = f.get();

You can also accomplish asynchronous operation without using a Future to block for the response:

    AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
    asyncHttpClient.prepareGet("http://www.ning.com/").execute(new AsyncHandler<Response>(){
        
        @Override
        public Response onCompleted(Response response){
            // Do something with the Response
            // ...
            return response;
        }
        
        @Override
        public void onThrowable(Throwable t){
            // Something wrong happened.
        }
    });

You can also mix Future with AsyncHandler

    AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
    Future<Integer> f = asyncHttpClient.prepareGet("http://www.ning.com/").execute(new AsyncHandler<Integer>(){
        
        @Override
        public int onCompleted(Response response){
            // Do something with the Response
            return response.getStatusCode();
        }
        
        @Override
        public void onThrowable(Throwable t){
            // Something wrong happened.
        }
    });
    
    int statuÑ•Code = f.get();

You can also have full control on the Response life cycle by deciding at any moment to stop processing what the server is sending back:

    AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
    Future<Response> f = asyncHttpClient.preparePost("http://www.ning.com/").addBodyPart(new StringPart("foo", "bar")).execute(new AsyncStreamingHandler(){
        
        @Override
        public Response onContentReceived(HttpContent content) {
            if (content instanceof HttpResponseHeaders) {
                // The Response HTTP headers has been received.   
                ..
                // If we aren't interested by the response body, we just have to:
                throw new ResponseComplete();
            } else if (content instance HttpResponseBody){
                // As soon as the response's bytes arrive, we get notified
                if ( ((HttpResponseBody)content).isComplete()){
                    // The response has been fully read
                }
            }
        }

        @Override
        public void onThrowable(Throwable t){
            // Something wrong happened.
        }
    }
    // The response may be incomplete if the AsyncStreamingHandler decided to only read the headers or part of the body
    Response response = f.get();

Finally, you can also configure the AsyncHttpClient via it's AsyncHttpClientConfig object:

        AsyncHttpClientConfig cf = new AsyncHttpClientConfig.Builder().setProxyServer(new ProxyServer("127.0.0.1", 38080)).build();
        AsyncHttpClient c = new AsyncHttpClient(cf);

For more information, post your question to http://groups.google.com/group/asynchttpclient


